<!DOCTYPE html>
<html lang="en">
<head>


  <script src="https://kit.fontawesome.com/f5a853a818.js" crossorigin="anonymous"></script>

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Kanit:wght@100;200;300&family=Lobster&family=Rajdhani:wght@300&display=swap" rel="stylesheet">nit:wght@100&family=Lobster&family=Rajdhani:wght@300&display=swap" rel="stylesheet">

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Nova+Mono&display=swap" rel="stylesheet">

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Lobster&family=Rajdhani:wght@300&display=swap" rel="stylesheet">

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Lobster&display=swap" rel="stylesheet">

  <link rel="preconnect" href="https://fonts.googleapis.com">
  <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
  <link href="https://fonts.googleapis.com/css2?family=Oswald:wght@300&display=swap" rel="stylesheet">

  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
</head>
<body>



  <style>


    body{
      background-color: #010017;
    }

    .shake-horizontal {
      -webkit-animation: shake-horizontal 0.8s cubic-bezier(0.455, 0.030, 0.515, 0.955) both;
              animation: shake-horizontal 0.8s cubic-bezier(0.455, 0.030, 0.515, 0.955) both;
    }

        /* ----------------------------------------------
    * Generated by Animista on 2023-5-9 7:57:46
    * Licensed under FreeBSD License.
    * See http://animista.net/license for more info. 
    * w: http://animista.net, t: @cssanimista
    * ---------------------------------------------- */

    /**
    * ----------------------------------------
    * animation shake-horizontal
    * ----------------------------------------
    */
    @-webkit-keyframes shake-horizontal {
      0%,
      100% {
        -webkit-transform: translateX(0);
                transform: translateX(0);
      }
      10%,
      30%,
      50%,
      70% {
        -webkit-transform: translateX(-10px);
                transform: translateX(-10px);
      }
      20%,
      40%,
      60% {
        -webkit-transform: translateX(10px);
                transform: translateX(10px);
      }
      80% {
        -webkit-transform: translateX(8px);
                transform: translateX(8px);
      }
      90% {
        -webkit-transform: translateX(-8px);
                transform: translateX(-8px);
      }
    }
    @keyframes shake-horizontal {
      0%,
      100% {
        -webkit-transform: translateX(0);
                transform: translateX(0);
      }
      10%,
      30%,
      50%,
      70% {
        -webkit-transform: translateX(-10px);
                transform: translateX(-10px);
      }
      20%,
      40%,
      60% {
        -webkit-transform: translateX(10px);
                transform: translateX(10px);
      }
      80% {
        -webkit-transform: translateX(8px);
                transform: translateX(8px);
      }
      90% {
        -webkit-transform: translateX(-8px);
                transform: translateX(-8px);
      }
    }

        .ping {
              -webkit-animation: ping 10ms ease-out infinite reverse both;
              animation: ping 10ms ease-out infinite reverse both;
        }

        /* ----------------------------------------------
    * Generated by Animista on 2023-5-9 8:0:55
    * Licensed under FreeBSD License.
    * See http://animista.net/license for more info. 
    * w: http://animista.net, t: @cssanimista
    * ---------------------------------------------- */

    /**
    * ----------------------------------------
    * animation ping
    * ----------------------------------------
    */
    @-webkit-keyframes ping {
      0% {
        -webkit-transform: scale(1.5);
                transform: scale(1.5);
        opacity: 0.1;
      }
      80% {
        -webkit-transform: scale(1.2);
        transform: scale(1.2);
        opacity: 0.5;
      }
      100% {
        -webkit-transform: scale(0.9);
                transform: scale(0.9);
        opacity: 0.8;
      }
    }
    @keyframes ping {
      0% {
        -webkit-transform: scale(1.5);
                transform: scale(1.5);
        opacity: 0.1;
      }
      80% {
        -webkit-transform: scale(1.2);
        transform: scale(1.2);
        opacity: 0.5;
      }
      100% {
        -webkit-transform: scale(0.9);
                transform: scale(0.9);
        opacity: 0.8;
      }
    }

    .inputContainer{
      background-color: #000000b3;
      top: 7.3vw;
      box-shadow: -2vw 0vw 62vw 59.21vw #000000a6;
      border-radius: 3vw 3vw 3vw 3vw;
      max-width: 74%;
      width: 61vw;
      position: absolute;
      height: 34vw;
      border-style: groove;
      left: 19%;
      max-height: 41vw;
      transition: all 200ms ease-in-out;
      z-index: 9999999;
    }
      
    
    
    .hidden{
      opacity: 0;
      visibility: hidden;
      transition-delay: 100ms;
    }


    .messagebox{
      left: 2vw;
      /* min-width: 89%; */
      position: relative;
      width: 58.4vw;
      height: 69%;
      margin-top: 4.7vw;
      margin-left: 0.6vw;
      overflow-y: scroll;
    }

    .messagebox::-webkit-scrollbar{
      width: 0.5em;
    }

    .messagebox::-webkit-scrollbar-thumb {
      background-color: transparent; /* Make the thumb transparent */
    }

    .messagebox::-webkit-scrollbar-track {
      background-color: transparent; /* Make the track transparent */
    }

    .form{
      left: 0.4vw;
      display: inline-flex;
      max-height: 12.9vw;
      max-width: 84vw;
      overflow: hidden;
      height: 2.8vw;
      width: 60vw;
      position: inherit;
      bottom: 11.1vw;
      margin-bottom: 0.5vw;
      align-content: center;
      flex-wrap: nowrap;
      flex-direction: row;
      top: 30vw;
    }

    .input{
      left: 7vw;
      resize: none;
      min-width: 21vw;
      border-width: 0.2vw;
      display: flex;
      padding-left: 1vw;
      padding-right: 1vw;
      max-height: 3vw;
      position: relative;
      font-size: 1vw;
      border-radius: 2vw;
      justify-content: center;
    }

    .button{
      top: 0.2vw;
      height: 2.5vw;
      overflow: hidden;
      left: 16vw;
      position: relative;
      display: flex;
      border-radius: 2vw;
      border: none;
      width: 2.5vw;
      font-size: 1.4vw;
      transition: all 300ms ease-in-out;
      justify-content: center;
      align-items: center;
      cursor: pointer;
    }

    .fa-regular:hover{
      opacity: 0.8;
    }

    .emoji{
      font-size: 2.4vw;
      position: relative;
      left: 13.4vw;
      color: aliceblue;
      opacity: 1;
      cursor: pointer;
    }

    .emoji:hover{
      opacity: 0.8;
    }

    .nav{
        display: flex;
        justify-content: flex-start;
        flex-wrap: nowrap;
        flex-direction: column;
        min-width: 13vw;
        min-height: 42vw;
        background-color: #661515;
        position: fixed;
        margin-top: 5.4vw;
        left: 0;
    }

    

    .nav a{
        background-color: #dc0d0d;
        height: 5.5vw;
        display: flex;
        align-content: center;
        flex-direction: row;
        justify-content: center;
        align-items: center;
    }

    .nav a{
      color: aliceblue;
      text-decoration: none;
      transition: all 200ms ease-out;
    }

    .nav a:hover{
        background-color: #bb0505;
        border-radius: 0.5vw;
        transform: scale(1.2,1.2);
        transform-origin: 1vw;

    }

    .nav i { 
        color: #020202;
        margin: 1vw;
        font-size: 1.2vw;
        position: absolute;
        left: 0vw;
    }



    .nav a p{
        font-size: 1.5vw;
        font-family: 'Oswald', sans-serif;
    }

    .header{
      text-shadow: 0vw 0vw 3vw #ffeeee;
      position: absolute;
      left: 10%;
      color: aliceblue;
      top: 6px;
      font-size: 3vw;
      font-family: 'Oswald', sans-serif;
      cursor: pointer;
    }
    
    .header-div{
        display: flex;
        position: fixed;
        top: 0vw;
        flex-wrap: wrap;
        align-content: center;
        left: 0vw;
        background-color:#270505;
        height: 8vw;
        width: 13vw;
        align-items: center;
        justify-content: center;
        transition: all 200ms ease-in-out;
    } 

    .header-div .header img{
        position: relative;
        width: 12vw;
        top: 0.4vw;
        left: -1vw;
    }
    
    .others{
      border-style: solid;
      border-color: red;
      border-radius: 1vw;
      border-bottom: double;
      min-height: 29vw;
      height: 43vw;
      max-width: 14.8vw;
      background-color: #e4e2e7;
      width: 41vw;
      left: 85%;
      position: relative;
      top: 2vw;
    }

    .OnlinePeople{
      animation: ping 1000ms ease-out infinite reverse both;
    }

    .OnlinePeopleText{
      border-bottom-width: 0.5vw;
      border-style: outset;
      border-color: #ff0000;
      overflow: hidden;
      background: #040404;
      top: 0vw;
      font-family: monospace;
      font-size: 2vw;
      border-radius: 1vw 1vw 0vw 0vw;
      width: 14.6vw;
      position: relative;
      height: 3.2vw;
      display: flex;
      flex-wrap: nowrap;
      justify-content: center;
      align-items: center;
    }

    .closeChatBox{
      cursor: pointer;
      display: flex;
      border-radius: 4vw;
      top: 16.5vw;
      left: 63vw;
      position: inherit;
      font-size: 2.9vw;
      width: 2.2vw;
      color: whitesmoke;
      height: 2.3vw;
      justify-content: center;
      align-items: center;
      z-index: 99999999;
    }


    .openChatBox{
      position: absolute;
      cursor: pointer;
      display: flex;
      background-color: #1710b900;
      top: 23vw;
      left: 82vw;
      font-size: 3vw;
      width: 3.2vw;
      color: white;
      height: 3.3vw;
      justify-content: center;
      align-items: center;
    }

    .fa-caret-left{
      transition: all 100ms ease-in-out;
    }

    .openChatBox .fa-caret-left:hover{
      box-shadow: 1vw 0vw 0vw 0vw red;
      border-radius: 6vw 0vw 0vw 6vw;
    }



    /* Phone */
    @media only screen and (max-width: 600px) {

        



    }


    /* TABLET */ 
    @media (min-width: 768px) and (max-width: 1024px) {


    }


    .leftMessageBox{
      margin-top: 10px;
      font-size: 26px;
      border-radius: 0.4vw 0.5vw 0.6vw 0;
      background-color: aliceblue;
      display: flex;
      align-content: center;
      /* box-shadow: 0vw 0vw 1vw 0.1vw white; */
      width: fit-content;
      padding: 0.3vw;
      max-width: 22vw;
      overflow-wrap: anywhere;
      padding-bottom: 0vw;
      flex-wrap: wrap;
      flex-direction: column;
    }

    .loggedin{
      pointer-events: none !important;
      background-color: #661515 !important;
      color: black !important;
    }

    .Opeople{
      position: relative;
      width: 14.9vw;
      height: 39.3vw;
      padding-top: 0px;
      border-radius: 0vw 0vw 0vw 1vw;
      /* scroll-margin-left: 52px; */
      overflow-y: scroll;
      overflow-x: hidden;
      background-color: black;
      
    }

    .Opeople::-webkit-scrollbar{
      width: 0.5em;
    }

    .Opeople::-webkit-scrollbar-thumb {
      background-color: transparent; /* Make the thumb transparent */
    }

    .Opeople::-webkit-scrollbar-track {
      background-color: transparent; /* Make the track transparent */
    }

    .Odiv{
      left: 0.3vw;
      border: ridge;
      /* border-radius: 1vw; */
      margin-top: 2%;
      position: relative;
      display: flex;
      align-items: center;
      width: 96%;
      background-color: #6dff000a;
      height: 4vw;
      flex-wrap: wrap;
      border-color: #ff0000;
      align-content: center;
      justify-content: center;
      flex-direction: column;
    }

    .Oimgcover{
      top: 0vw;
      left: -0.9vw;
      position: relative;
      display: flex;
      width: 2.5vw;
      height: 2.5vw;
      /* font-size: 17vw; */
      border-radius: 3vw;
      background: #ffffff36;
      border-color: #ffffff30;
      border-style: outset;
    }

    .OusernameBox{
      border: outset;
      position: relative;
      display: flex;
      align-content: center;
      justify-content: center;
      flex-wrap: wrap;
      font-size: 1vw;
      width: 7vw;
      height: 1.4vw;
      border-color: #ffffff26;
      left: 0.1vw;
      color: white;
      background: #1c00ff0f;
      border-radius: 1vw;
      font-family: 'Lobster', cursive;
    }

    .Obutton{
      font-size: 1.1vw;
      border-radius: 2vw;
      left: 0.3vw;
      position: relative;
      display: flex;
      top: 0.2vw;
      border: none;
      background: border-box;
      color: white;
      cursor: pointer;
      font-family: 'Lobster', cursive;
      font-family: 'Rajdhani', sans-serif;
    }

    .timediv{
      position: relative;
      font-size: 10px;
      font-family: fantasy;
      top: 0%;
      left: 0%;
      color: black;
    }

    .privateChat{
      border-radius: 2vw;
      left: 17vw;
      position: absolute;
      background: #00000054;
      width: 64%;
      border: solid;
      box-shadow: #009eff 0vw 0vw 0vw 0.3vw;
      height: 40vw;
      top: 5vw;
      flex-wrap: nowrap;
      align-items: center;
      flex-direction: column;
      transition: all 100ms ease-in-out;
    }

    .form1{
      border: none;
      background-image: linear-gradient(180deg,rgb(0 36 203 / 0%),#0261d242 58.85%);
      height: 13%;
      position: relative;
      display: flex;
      border-radius: 2vw;
      flex-wrap: nowrap;
      align-items: center;
      top: 4%;
      left: 0%;
      width: 100%;
      gap: 0.5vw;
    }

    .messageContainer{
      position: relative;
      display: flex;
      width: 100%;
      height: 29vw;
      flex-direction: column;
      gap: 1vw;
      overflow-y: scroll;
    }

    .messageContainer::-webkit-scrollbar{
      width: 0.5em;
    }

    .messageContainer::-webkit-scrollbar-thumb {
      background-color: transparent; /* Make the thumb transparent */
    }

    .messageContainer::-webkit-scrollbar-track {
      background-color: transparent; /* Make the track transparent */
    }

    .whoContainer{
      position: relative;
      display: flex;
      width: 100%;
      height: 4.5vw;
      border-radius: 1vw 1vw 0vw 0vw;
    }

    .pInput{
      bottom: 8%;
      left: 6%;
      background: #010101a1;
      font-size: 1.2vw;
      border-radius: 2vw;
      width: 36vw;
      height: 3vw;
      position: relative;
      padding-left: 1.3vw;
      padding-right: 1.3vw;
      border: solid;
      border-color: #3a3636 !important;
      color: #d8dced;
    }

    .pEmoji{
      font-size: 2.6vw;
      color: #cccccc;
      cursor: pointer;
      position: relative;
      left: 7vw;
      bottom: 8%;
    }

    .pButton{
      bottom: 8%;
      cursor: pointer;
      border: none;
      font-size: 2.4vw;
      background: #1f1f1f00;
      color: #cccccc;
      position: relative;
      left: 10.5vw;
    }


    .close{
      display: flex;
      left: 88%;
      position: relative;
      color: #ff000061;
      font-size: 2vw;
      align-items: center;
      justify-content: center;
      cursor: pointer;
    }

    .close:hover{
      color: #ff000092;
    }

    .backgroundText{
      top: 20vw;
      display: flex;
      left: 43vw;
      position: absolute;
      box-shadow: 0vw 0vw 2vw 0vw black;
      color: #ffffff87 !important;
      font-family: 'Nova Mono', monospace;
      font-size: 2vw;
      color: white;
      max-width: 20vw;
      pointer-events: none;
    }

    .message-left{
      margin-left: 5vw;
      background: #757575;
      position: relative;
      display: flex;
      width: 300px;
      height: fit-content;
      border-radius: 1vw 1vw 1vw 0vw;
      flex-direction: column;
      left: 0%;
    }

    .message-right{
      background: #048aff;
      position: relative;
      display: flex;
      width: 300px;
      height: fit-content;
      border-radius: 1vw 1vw 0vw 1vw;
      flex-direction: column;
      /* margin-right: 4vw; */
      left: 61%;
    }

    .message-info-right{
      position: relative;
      display: flex;
      top: -1%;
      left: 4%;
    }

    .message-info-left{
      position: relative;
      display: flex;
      top: -2%;
      left: 86%;
    }

    .pMessage-text{
      margin-right: 6px;
      margin-left: 2%;
      position: relative;
      display: flex;
      overflow-wrap: anywhere;
      flex-wrap: wrap;
      justify-content: center;
      max-width: 100%;
      font-size: 26px;
      margin-top: 3%;
      font-family: 'Kanit', sans-serif;
      font-family: 'Lobster', cursive;
      font-family: 'Rajdhani', sans-serif;
      font-weight: 600;
    }



    .sentiment{
      position: absolute;
      display: flex;
      justify-content: center;
      align-items: center;
      font-size: 2vw;
      color: #c6c6c6;
      left: 105%;
      top: 34%;
      cursor: pointer;
      transition: all 100ms ease-out;
    }

    .sentiment:hover{
      transform: scale(1.1,1.1);
    }

    .analyzing {
      border-radius: 10px; /* Add rounded corners */
      animation: pulse 900ms infinite; /* Apply a pulsating animation */
    }

    @keyframes pulse {
      0% { transform: scale(1); color: red; }
      50% { transform: scale(1.1); color: rgb(0, 255, 0); }
      100% { transform: scale(1); color: blue; };
    }

    .user-picture{
      width: 100%;
      height: 100%;
    }

    .userBox{
      border-radius: 2vw;
      position: relative;
      display: flex;
      background: white;
      height: 3.5vw;
      width: 3.5vw;
      left: 3%;
      top: 26%;
      overflow: hidden;
      justify-content: center;
      align-items: center;
      cursor: pointer;
    }

    .anotherUserName{
      position: relative;
      display: flex;
      width: fit-content;
      height: 1vw;
      color: whitesmoke;
      top: 50%;
      left: 3%;
      font-size: 1.5vw;
      align-items: center;
      justify-content: center;
      flex-wrap: nowrap;
    }
  </style>

    <a class="header-div" href="/main">
      <header class="header"><img src="https://summarify.io/static/img/summarify-logo-main.png" alt=""></header>

    </a>

    <nav class="nav" >
      <a href="/main"><i class="fa-solid fa-house"></i> <p > Main</p></a>
      <a href="/chatroom"><i class="fa-solid fa-message"></i> <p href=""> Live Chatroom</p></a>
      <a class="authentication" href="/login"><i class="fa-solid fa-user-plus"></i> <p href="">   Login</p></a>
      <a href="/main" class="logout"><i class="fa-sharp fa-solid fa-right-from-bracket"></i> <p>Log out</p> </a>
      <a class="authentication" href="/signup"><i class="fa-solid fa-user-plus"></i><p href=""> Sign up</p></a>
      <a href="/about"><i class="fa-regular fa-address-card"></i> <p > About</p></a>
    </nav>


  <div class="inputContainer" style="display: none;"> 

    <div class="closeChatBox"><i class="fa-solid fa-caret-right"></i></div>

    <div id="messagebox" class="messagebox"></div>

      <form  id="messageform" class="form">

        <input class="input" id="messageInput" type="text" placeholder="Type...">
        <a class="emoji"><i class="fa-solid fa-face-smile"></i></a>
        <button class="button" id="sendButton"><i class="fa-regular fa-paper-plane" style="color: #202122;" aria-hidden="true"></i></button>

      </form>
    
  </div>

  <div class="openChatBox"><i class="fa-solid fa-caret-left"></i></div>

  <div class="others">
    <a class="OnlinePeopleText"><i class="fa-solid fa-earth-americas OnlinePeople" style="color: #ff0000;"></i></a>
    <div class="Opeople"></div>
    
  </div>

  <p class="backgroundText">Open Chat</p>



  
  <script>

    const openChatBox = document.querySelector(".openChatBox");
    const closeTheChat = document.querySelector(".closeChatBox");
    const inputContainer = document.querySelector(".inputContainer");
    const backgroundText = document.querySelector(".backgroundText");

    closeTheChat.addEventListener("click" , (event) => {
      inputContainer.classList.add("hidden");
      openChatBox.classList.remove("hidden");
      backgroundText.textContent = "Enjoy 💌";
    });

    openChatBox.addEventListener("click", (event) => {
      inputContainer.classList.remove("hidden");
      inputContainer.style.display = "flex";
      openChatBox.classList.add("hidden");
      const privateChat = document.querySelector(".privateChat");
      backgroundText.textContent = "Public Chat";
      if(privateChat){

        privateChat.remove();

      }
    });
 
    function deleteCookie(name) {
      document.cookie = name + "=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;";
    }


    const logout = document.querySelector(".logout");

    logout.addEventListener("click", () =>{
       deleteCookie("userId");
       deleteCookie("connect.sid");
    });

    function addMessage(message,id,label,score,timestamp) { 


        // Get the message box element
        const messageBox = document.querySelector(".messagebox");

              
        // message elements:
        const messageElements = document.createElement("div");
        messageElements.setAttribute("id",("message" + (id+1)).toString());
        messageElements.classList.add("messageElements");
        messageElements.classList.add("leftMessageBox");


        // Create a new message element
        const messaga = document.createElement("span");
        messaga.setAttribute("id",id);
        // Set the message element's text content
        messaga.textContent = message + " ";

        let timeformat = timestamp.substring(11,16);
        const timediv = document.createElement("div");
        const time = document.createElement("a");
        time.textContent = timeformat;
        timediv.classList.add("timediv");
        timediv.append(time);

        messageElements.appendChild(messaga);
        messageElements.appendChild(timediv);
        messageBox.append(messageElements);


        messageBox.scrollTop = messageBox.scrollHeight + messageElements.scrollHeight;

    }


    const socket = new WebSocket(`ws://localhost:8070?userid=${document.cookie}`);



    socket.addEventListener("open", (event) => {
    console.log("A New WebSocket Connection Has Opened!");
    });

    socket.addEventListener("close",(event) => {
    console.log("A New WebSocket Connection Has Closed!");
    })

    socket.addEventListener("error",(error) => {
    console.log("An Error Occured During WebSocket Connection : " + error);
    })

    socket.addEventListener("message", async (message) => { // this endpoint will retrieve online users as much as the sentiment analysis results.

    let data = await JSON.parse(message.data);
      
    if( data.length > 0 && !data[0].label && !data[0].score){

        const onlinepeople = document.querySelector(".Opeople");
        onlinepeople.innerHTML = "";

        let uniqueIds = {};

        data.forEach(async (element) => {
          let id = element.id;
          let username = element.username;
          
          if (!(id in uniqueIds)) {
            await addOnlinePeople(id, username);
            uniqueIds[id] = false;
          }
        });
        
        uniqueIds = {};

    } else {
      

        for (let i = 0; i < data.length; i++) {
                    
                    let message = data[i].message;
                    let id = data[i].id;
                    let label = data[i].label
                    let score = data[i].score
    
                    console.log("fromupdatedmessages : " + message);
                    
                    await updateMessage(message,id,label,score);
                    }

    }
    });


    async function addOnlinePeople(id,username){ // adds connected people with their img and username

      const onlinepeople = document.querySelector(".Opeople"); // div that shows all online people

      const div = document.createElement("div"); // div element that will contain user identity
      div.classList.add("Odiv");
      div.setAttribute("id",id);

      const imgcover = document.createElement("div"); // user image.
      imgcover.classList.add("Oimgcover");

      const image = document.createElement("img"); // img element
      image.classList.add("Oimg");
      image.setAttribute("src","https://icon-library.com/images/no-user-image-icon/no-user-image-icon-0.jpg");
      

      const usernameBox = document.createElement("div"); // username container box
      usernameBox.classList.add("OusernameBox");

      const usernamE = document.createElement("div"); // username
      usernamE.classList.add("Ousername");
      usernamE.textContent = username;
      usernameBox.append(usernamE);

      const a = document.createElement("a");
      const i = document.createElement("i");
      i.classList.add("fa-regular","fa-paper-plane");
      a.append(i);


      const button = document.createElement("button");
      button.textContent = "message" + " " ;
      button.classList.add("Obutton");
      button.appendChild(a);

      div.appendChild(imgcover);
      div.appendChild(usernameBox);
      div.appendChild(button);

      onlinepeople.appendChild(div);
    }
    addOnlinePeople(1,"bot ali")
    addOnlinePeople(2,"bot eren")
    addOnlinePeople(3,"bot azra")
  // get the form element.
  const form = document.getElementById('messageform');
  const chat = document.querySelector(".privateChat");
  
  form.addEventListener('submit', async (event) => {
    
        event.preventDefault();

        // get the message.
        const messageInput = document.getElementById('messageInput');
        console.log(messageInput.value);
        const message = messageInput.value;
        messageInput.value = "";


        const now = new Date();
        const tzOffset = 3; // Türkiye'nin saat dilimi ofseti (UTC+03:00)
        const timestamp = new Date(now.getTime() + tzOffset * 3600000).toISOString().slice(0, 23);

        // Do something with the message, like sending it to a server or displaying it on the page
        fetch('/chatroom/message', {

            method: 'POST',
            headers: {
              'Content-Type': 'application/json'
            },
            body: JSON.stringify({
              messaga: message,
              timestamp: timestamp
            })
        })
        .then(response => {
            if (!response.ok) {
              throw new Error('Network response was not ok');
            }
            return response;

        })
        .then(data => {
            console.log('Response data:', data);
            

        }).catch(error => {
            console.error('Error:', error);
        });

  });
    

  
  const opeople = document.querySelector(".Opeople"); // Opeople div (Online People Div)
  let anotherId; // another person's id whom we want to talk with
  let privatechatId;  // chat id that contains concatination of two user ids
  let lastMessageTimestamp; // this will lead to get new messages from database

  opeople.addEventListener("click", async (event) => {
  
    try{
      
      const clickedElement = event.target;
      const Odiv = clickedElement.closest(".Odiv");          
      anotherId = Odiv.getAttribute("id"); // another person's id whom we want to talk with
      const currentUsersId = document.cookie.split("userId=")[1]; // current user's id
      const nameOfAnother = Odiv.children[1].textContent;
      console.log(nameOfAnother);

      fetch("/chatroom/private-chat", {
        method:"POST",
        headers:{
          "Content-Type":"application/json",
        },
        body: JSON.stringify({
          userId:currentUsersId,
          anotherId:anotherId
        })
        }).then(async (res) => {

          const data = await res.json();
          privatechatId = data.tableName; // id of the private chatroom
          let messages = data.message[0];


          if(res.status == 200){
          
            const publicChat = document.querySelector(".inputContainer");  
            const openChatBox = document.querySelector(".openChatBox");
            const chat = document.querySelector(".privateChat");
            const bText = document.querySelector(".backgroundText");
            const form = document.querySelector(".form1");
            const input = document.querySelector(".pInput");
              
            publicChat.style.display = "none";
            openChatBox.classList.remove("hidden");
            
            if(!chat){

              createPrivateChatElement(privatechatId,nameOfAnother);
              const chat1 = document.querySelector(".privateChat");

              const bText = document.querySelector(".backgroundText");
              const form = document.querySelector(".form1");
              const input = document.querySelector(".pInput");

              bText.textContent = "Have Fun!";

              form.addEventListener("submit", async (event) =>{

                event.preventDefault();

                let messageInput = input.value;
                let userId = document.cookie.split("userId=")[1];
                const privateChatId = chat1.getAttribute("id");

                const now = new Date();
                const tzOffset = 3; // Türkiye'nin saat dilimi ofseti (UTC+03:00)
                const timestamp = new Date(now.getTime() + tzOffset * 3600000).toISOString().slice(0, 23);

                if(messageInput != ""){
                  
                  fetch("/chatroom/private-message-stream",{
                    method:"POST",  
                    headers: {
                      "Content-Type":"application/json"
                    },
                    body: JSON.stringify({
                      userId:userId,
                      tableId:privateChatId,
                      message:messageInput,
                      timestamp:timestamp
                    })
                  }).then(res =>{
                    console.log("private chatting works");
                  }).catch(err => {
                    console.log(err);
                  });

                }

              })


            }else{
              
              chat.remove();
              bText.textContent = "Open New Chat";
              bText.style.left ="43vw";

            }
          }
          
          const messageBox = document.querySelector(".messageContainer");

          messageBox.innerHTML="";

          messages.forEach(message =>{
             
            let id = message.id;
            let userId = message.userId;
            let messaga = message.message;
            let timestamp = message.timestamp.substring(11,16);
            lastMessageTimestamp = message.timestamp;
            createMessage(id,userId,messaga,timestamp);

          });
 

        
        }).catch(err => {
            console.log("while creating chat error occured! => " + err);
        });


    } catch (err) {

      console.log("Since clicked on the blank area => " + err);


    }
  }); 


function handlePrivateChatAtr(){

  const privateChat = document.querySelector(".privateChat");
  const closeButton = document.querySelector(".close");
  const elements = getEventListeners(closeButton);

  if(Object.keys(elements).length > 0){

    closeButton.removeEventListener("click",closeListener);

  }else{

    closeButton.addEventListener("click",closeListener);

  }
}

function closeListener() {
  privateChat.remove();
}


async function fetchNewMessages() { // fetch new private room messages. to two users
  try {
    const userId = document.cookie.split("userId=")[1];
    const anotherUser = anotherId;
    const chatId = privatechatId;

    const response = await fetch(`/chatroom/get-new-messages?userId=${userId}&anotherId=${anotherUser}&chatId=${chatId}&timestamp=${lastMessageTimestamp}`);
    const data = await response.json();
    
    lastMessageTimestamp = data[data.length-1].timestamp; // update the last message timestamp

    // Process the new messages
    data.forEach((message) => { // extract the data
      const id = message.id;
      const userId = message.userId;
      const messaga = message.message;
      const timestamp = message.timestamp.substring(11, 16);

      createMessage(id, userId, messaga, timestamp); // add them to the screen
    });
  } catch (error) {
    
  }
}

function checkIfThereIsPrivateChat(){

  const privateChat = document.querySelector(".privateChat");

  if(privateChat)
    return true;
  else
    return false;
}

let count = 0;

function fetchNewPrivateMessages(){

  let thereActiveChat = checkIfThereIsPrivateChat(); // check if active chat?
  
  if(thereActiveChat){
    fetchNewMessages();
    count += 1;
  }else{
    count = 0;
  }

  if(count == 1){
    const privateChat = document.querySelector(".privateChat");
    const closeButton = document.querySelector(".close");
    

    closeButton.addEventListener("click",(event)=>{
      privateChat.remove();
    });

    
    privateChat.addEventListener("click",async (event) => {

      const clickedItem = event.target;
      let element = clickedItem.closest(".sentiment");
      
      if(element != null){

        let id = element.getAttribute("id");
        const messageElement = document.getElementById("messageNo"+(parseInt(id)-1));
        let message = messageElement.textContent;
        
        if(id && message){
  
          messageElement.classList.add("analyzing");
  
          
          await fetch(`/chatroom/private-chat/message-sentiment-analysis`,{ // send messages to sentiment analysis
            method:"POST",
            headers: {
              "Content-Type":"application/json"
            },
            body: JSON.stringify({
              id:id,
              message:message,
            })
          }).then( async (res) => {
            const getResult = await res.json();
            let label = getResult.evaluation["label"];
            let score = getResult.evaluation["score"];
            messageElement.classList.remove("analyzing");

            if(label === "Negatif"){
              messageElement.style.color = "rgb(120 14 14)";
            }else if(label === "Pozitif"){
              messageElement.style.color = "#00f200";
            }else if(label === "Nötr"){
              messageElement.style.color = "blue";
            }
            
          }).catch(err => {
            messageElement.classList.remove("analyzing");
            console.log(err);
          })
  
        }

      }

    })

  }

}


// Start the initial long-polling request
setInterval(fetchNewPrivateMessages, 500);


  



  // this is built in object that enables using Service Sent-Events protocole. 
  const source = new EventSource('/chatroom/getmessages');


  // listens for event from server domain /getmessages.
  source.onmessage = async function(event) {
        // pArses the data
        const eventData = JSON.parse(event.data);

        for (let i = 0; i < eventData.length; i++) {
              
              let message = eventData[i].message;
              let id = eventData[i].id;
              let label = eventData[i].label;
              let score = eventData[i].score;
              let timestamp = eventData[i].timestamp;

              await addMessage(message,id,label,score,timestamp);
              
            }

    };


 
      
      
    const updated_source = new EventSource("/chatroom/update_messages");
        
    updated_source.onmessage = async function(event){
    
      let sentimentData= await JSON.parse(event.data);

    }


    document.addEventListener('DOMContentLoaded', function() {

      var myCookie = document.cookie; // Get the cookie
      
      if (myCookie) {
          var myElement = document.querySelectorAll('.authentication'); // Select the HTML element by ID

          myElement.forEach(element => {
                  element.classList.add("loggedin");  // Disable the element
          });

      }else{
          
          logout.style.display = "none";

      }

    });

    function createPrivateChatElement(id,name) {

        // Create the main container div
        const privateChatDiv = document.createElement('div');
        privateChatDiv.className = 'privateChat';
        privateChatDiv.style.display="flex";
        privateChatDiv.setAttribute("id",id);

        
        // userpicture box div
        const userBox = document.createElement("div");
        userBox.classList.add("userBox");
        // Create the user picture element
        const userPicture = document.createElement("div");
        // Set the user picture class and style
        userPicture.classList.add("user-picture");
        userPicture.style.backgroundImage = "url(https://sun6-22.userapi.com/s/v1/ig2/vTBODAf0S5tUutkKMQUlQig18W5Ghd815WHysnZ3FnqgquHfg-hoSrbzU2dJ1_VTT0m2BrQJaV6iKElRcUZkkq60.jpg?size=50x50&quality=95&crop=0,204,1548,1548&ava=1)";
        userBox.appendChild(userPicture);
        
        // span for user name
        const anotherUserName = document.createElement("span");
        anotherUserName.classList.add("anotherUserName")
        const a = document.createElement("a");
        a.textContent = name;
        anotherUserName.appendChild(a);

        // Create the whoContainer div
        const whoContainerDiv = document.createElement('div');
        whoContainerDiv.className = 'whoContainer';
        whoContainerDiv.appendChild(userBox);

        // Create the close button div
        const closeButtonDiv = document.createElement('div');
        closeButtonDiv.className = 'close';
        const closeButtonIcon = document.createElement('i');
        closeButtonIcon.className = 'fa-sharp fa-solid fa-circle-xmark';
        closeButtonDiv.appendChild(closeButtonIcon);
        whoContainerDiv.appendChild(closeButtonDiv);

        privateChatDiv.appendChild(whoContainerDiv);
        whoContainerDiv.appendChild(anotherUserName);

        // Create the messageContainer div
        const messageContainerDiv = document.createElement('div');
        messageContainerDiv.className = 'messageContainer';
        privateChatDiv.appendChild(messageContainerDiv);

        // Create the form element
        const form = document.createElement('form');
        form.id = 'containerform';
        form.className = 'form1';

        // Create the input element
        const input = document.createElement('input');
        input.className = 'pInput';
        input.id = 'pMessageInput';
        input.type = 'text';
        input.placeholder = 'Type...';
        form.appendChild(input);

        // Create the emoji anchor element
        const emojiAnchor = document.createElement('a');
        emojiAnchor.className = 'pEmoji';
        const emojiIcon = document.createElement('i');
        emojiIcon.className = 'fa-solid fa-face-smile';
        emojiAnchor.appendChild(emojiIcon);
        form.appendChild(emojiAnchor);

        // Create the send button element
        const sendButton = document.createElement('button');
        sendButton.className = 'pButton';
        sendButton.id = 'pSendButton';
        const sendButtonIcon = document.createElement('i');
        sendButtonIcon.className = 'fa-regular fa-paper-plane';
        sendButtonIcon.style.color = '#dfdfdf';
        sendButtonIcon.setAttribute('aria-hidden', 'true');
        sendButton.appendChild(sendButtonIcon);
        form.appendChild(sendButton);

        privateChatDiv.appendChild(form);

        // Create a container div to hold the privateChatDiv
        const containerDiv = document.createElement('div');
        containerDiv.appendChild(privateChatDiv);

        
        document.body.appendChild(containerDiv);

    }

    function createMessage(id, userId, message, timestamp) {

      // Create the message element
      const messageElement = document.createElement('div');
      messageElement.setAttribute("id", `messageNo`+id);

      if(userId == document.cookie.split("userId=")[1]){

        // Set the message content
        messageElement.innerHTML = 
        `
          <div class="pMessage-text">${message}</div>
          <div class="message-info-right">
            <span class="pTimestamp">${timestamp}</span>
          </div>
          <div class="sentiment" id=${id+1}><i class="fa-solid fa-magnifying-glass-chart"></i></div>
        `
        ;
        
        messageElement.classList.add('message-right');

      }else{
        
        // Set the message content
        messageElement.innerHTML = 
        `
          <div class="pMessage-text">${message}</div>
          <div class="message-info-left">
            <span class="pTimestamp">${timestamp}</span>
          </div>
          <div class="sentiment" id=${id+1}><i class="fa-solid fa-magnifying-glass-chart"></i></div>
        `
        ;
        
        messageElement.classList.add('message-left');

      }

      // Append the message element to the chat container
      const chatContainer = document.querySelector('.messageContainer');
      chatContainer.append(messageElement);

      chatContainer.scrollTop = chatContainer.scrollHeight + messageElement.scrollHeight;

    }

  
  </script>





</body>
</html>